#!/bin/bash

set -e

ARGWORK_DIR_PREFIX=

__argwork_message() {
  local message="$1"
  if [ -t 1 ]
  then
    >&2 echo -e "$(tput setaf 9)==> $(tput setaf 3)${message}$(tput sgr0)"
  else
    >&2 echo -e "ERROR: $message"
  fi
}

__argwork_error() {
  __argwork_message "$1"
  exit 1
}

__argwork_one() {
  local num var="$2" type="$3" val

  case "$1" in
    .) num="$__argwork_counter" ;;
    *) num="$1" ;;
  esac
  case "$num" in
    _)
      val="${__argwork_arg_map["$var"]}"
      ;;
    *)
      val="${__argwork_arg_map[$num]}"
      if [[ -z "$val" ]]
      then
        __argwork_error "value $num:[$var] must have value"
      fi
      ;;
  esac

  # Load the value from environment variable if '^'
  case "$val" in
    '$')
      local env_var_name="${var^^}"
      val="${!env_var_name}"
      ;;
    '%')
      local env_var_name="${__argwork_arg_map[$(( $num - 1 ))]^^}"
      val="${!env_var_name}"
      ;;
  esac

  export ARGWORK_CURRENT_VALUE="$val"
  __argwork_line_result=$(argwork-line "$@")
  if [[ $? -eq 0 ]]
  then
    eval "$__argwork_line_result"
  else
    exit 1
  fi
}

# Builds `__argwork_arg_map` dictionary where keys are names of positional or optional variables
__argwork_collate_args() {
  local sector=POSITIONAL
  local option_name=

  for index in "${!__argwork_args[@]}"
  do
    local word="${__argwork_args[$index]}"

    if [[ "${word:0-1}" == ':' ]]
    then
      sector=OPTIONAL
      if [[ ! -z "$option_name" ]]; then
        __argwork_error 'option name must be followed by its value'
      fi
      option_name="${word::-1}"
    else
      case $sector in
        OPTIONAL)
          if [[ -z "$option_name" ]]
          then
            __argwork_error "no option name preceeding its value [$word]"
          fi
          if [[ "$word" != '_' ]]
          then
            __argwork_arg_map["$option_name"]="$word"
          fi
          option_name=
          ;;
        POSITIONAL)
          __argwork_arg_map["$(($index + 1))"]="$word"
          ;;
      esac
    fi
  done
}

__argwork_script_name_to_path() {
  echo "$1"
}


# High-level interface
at() {
  __argwork_counter+=1
  __argwork_one "$@"
}

[[ -z "$ARGWORK_CLI_DIR" ]] && __argwork_error 'ARGWORK_CLI_DIR environment variable not specified'


__argwork_script_name="$1"
shift 1
__argwork_args=($@)
declare -A __argwork_arg_map
declare -i __argwork_counter=0

__argwork_collate_args

# Include script that may contain customizations, functions, settings
__argwork_global_env_path="$ARGWORK_CLI_DIR/.env.sh"
[[ -f "$__argwork_global_env_path" ]] && . "$__argwork_global_env_path"
__argwork_global_run_path="$ARGWORK_CLI_DIR/.run.sh"
[[ -f "$__argwork_global_run_path" ]] && . "$__argwork_global_run_path"

# Include the actual runnable script lib functions (e.g. assert) can be invoked inside run script
__argwork_script_rel_path="$(__argwork_script_name_to_path "$__argwork_script_name")"
__argwork_script_abs_path="$ARGWORK_CLI_DIR/${__argwork_script_rel_path} .sh"
[[ -f "$__argwork_script_abs_path" ]] && . "$__argwork_script_abs_path" || __argwork_error "command [$__argwork_script_abs_path] not found"

# Check if main function is defined
[[ $(type -t main) != function ]] && __argwork_error 'main function not found'

main
